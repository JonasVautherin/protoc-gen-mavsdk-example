#include <example_library/{{ plugin_name.lower_snake_case }}.h>
#include <pybind11/pybind11.h>
#include <pybind11/functional.h>

namespace py = pybind11;

PYBIND11_MODULE(example_library_py, m) {
    m.doc() = "Module corresponding to class {{ plugin_name.upper_camel_case }}";

    py::class_<{{ plugin_name.upper_camel_case }}> {{ plugin_name.lower_snake_case }}(m, "{{ plugin_name.upper_camel_case }}", "{{ class_description }}");
    {{ plugin_name.lower_snake_case }}
        .def(py::init<>())
        {% for method in methods %}
        .def("{{ method.name.lower_snake_case }}", &{{ plugin_name.upper_camel_case }}::{% if method.is_stream %}subscribe_{% endif %}{{ method.name.lower_snake_case }}, "{{ method.method_description }}"){% if loop.last %};{% endif %}{{ "\n" }}
        {%- endfor %}

    {% for enum in enums %}
    py::enum_<{{ plugin_name.upper_camel_case }}::{{ enum.name.upper_camel_case }}> {{ enum.name.lower_snake_case }}({{ plugin_name.lower_snake_case }}, "{{ enum.name.upper_camel_case }}");
    {{ enum.name.lower_snake_case }}
        {% for value in enum.values %}
        .value("{{ value.name.upper_camel_case }}", {{ plugin_name.upper_camel_case }}::{{ enum.name.upper_camel_case }}::{{ value.name.upper_camel_case }}){% if loop.last %};{% endif %}{{ "\n" }}
        {%- endfor %}
    {% endfor %}

    {% for struct in structs %}
    py::class_<{{ plugin_name.upper_camel_case }}::{{ struct.name.upper_camel_case }}> {{ struct.name.lower_snake_case }}({{ plugin_name.lower_snake_case }}, "{{ struct.name.upper_camel_case }}");
    {{ struct.name.lower_snake_case }}
        .def(py::init<>())
        {% for field in struct.fields %}
        .def_readwrite("{{ field.name.lower_snake_case }}", &{{ plugin_name.upper_camel_case }}::{{ struct.name.upper_camel_case }}::{{ field.name.lower_snake_case }}, "{{ field.description[1:field.description.rfind('\n')] }}"){% if loop.last %};{% endif %}{{ "\n" }}
        {%- endfor -%}
    {% endfor %}
}


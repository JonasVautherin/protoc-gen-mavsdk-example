import ExampleLibraryObjC

public class {{ plugin_name.upper_camel_case }} {
    let {{ plugin_name.lower_camel_case }}ObjC = {{ plugin_name.upper_camel_case }}ObjC()

    {% for enum in enums %}
    {% set enum_type = enum.name.upper_camel_case %}
    {% set enum_name = enum.name.lower_camel_case %}
    public enum {{ enum_type }} {
        {% for value in enum.values %}
        /// {{ value.description.strip() }}
        case {{ value.name.lower_camel_case }}
        {% endfor %}
    }

    func {{ enum_name }}ObjCTo{{ enum_type }}(_ {{ enum_name }}: {{ enum_type }}ObjC) -> {{ enum_type }} {
        switch ({{ enum_name }}) {
        {% for value in enum.values %}
        case .{{ value.name.lower_camel_case }}:
            return .{{ value.name.lower_camel_case }}
        {% endfor %}
        @unknown default:
            return .{{ enum.values[0].name.lower_camel_case }}
        }
    }
    {% endfor %}

    {% for struct in structs %}
    {% set struct_type = struct.name.upper_camel_case %}
    {% set struct_name = struct.name.lower_camel_case %}
    /// {{ struct.struct_description }}
    public struct {{ struct_type }} {
        public init({% for field in struct.fields %}{{ field.name.lower_camel_case }}: {{ field.type_info.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
            {% for field in struct.fields %}
            self.{{ field.name.lower_camel_case }} = {{ field.name.lower_camel_case }}
            {% endfor %}
        }

        {% for field in struct.fields %}
        /// {{ field.description.strip() }}
        let {{ field.name.lower_camel_case }}: {{ field.type_info.name }}
        {% endfor %}
    }

    func {{ struct_name }}To{{ struct_type }}ObjC(_ {{ struct_name }}: {{ struct_type }}) -> {{ struct_type }}ObjC {
        return {{ struct_type }}ObjC({% for field in struct.fields %}{{ field.name.lower_camel_case }}: {{ struct_name }}.{{ field.name.lower_camel_case }}{% if not loop.last %}, {% endif %}{% endfor %})
    }
    {% endfor %}

    public init() {}

    {% for method in methods %}
    {% set method_name %}
    {% if method.is_stream %}subscribe{{ method.name.upper_camel_case }}{% else %}{{ method.name.lower_camel_case }}{% endif %}
    {% endset %}
    {% set args %}
    {% for param in method.params %}{{ param.name.lower_camel_case }}: {{ param.type_info.name }}{% if not loop.last %}, {% endif %}{% endfor %}
    {% endset %}
    {% set callback %}
    {% if method.is_stream %}callback: @escaping ({{ method.return_type.name }}) -> (){% endif %}
    {% endset %}
    /// {{ method.method_description }}
    public func {{ method_name }}({{ args }}{% if method.is_stream %}{% if args %}, {% endif %}{{ callback }}{% endif %}) {% if method.is_request %}-> {{ method.return_type.name }} {% endif %}{
        {% for param in method.params %}
        {% set param_name = param.name.lower_camel_case %}
        {% if param.type_info.is_primitive %}
        let {{ param_name }}ObjC = {{ param_name }}
        {% else %}
        {% set convertFunc %}{{ param_name }}To{{ param.name.upper_camel_case }}ObjC{% endset %}
        let {{ param_name }}ObjC = {{ convertFunc }}({{ param_name }})
        {% endif %}
        {% endfor %}
        {% if method.params %}

        {% endif %}
        {% set params %}
        {% for param in method.params %}{{ param.name.lower_camel_case }}ObjC{% if not loop.last %}, {% endif %}{% endfor %}
        {% endset %}
        {% if not method.is_stream %}
        return {{ plugin_name.lower_camel_case }}ObjC.{{ method.name.lower_camel_case }}({{ params }})
        {% else %}
        {{ plugin_name.lower_camel_case }}ObjC.subscribe{{ method.name.upper_camel_case }}{% if params %}({{ params }}){% endif %} { [weak self] event in
            guard let strongSelf = self else {
                return
            }

            callback(strongSelf.{{ method.return_name.lower_camel_case }}ObjCTo{{ method.return_name.upper_camel_case }}(event))
        }
        {% endif %}
    }
    {% if not loop.last %}

    {% endif %}
    {% endfor %}
}
